<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>de.zib.paciofs</groupId>
        <artifactId>paciofs-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>

    <artifactId>paciofs-client</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>paciofs-client</name>

    <packaging>pom</packaging>

    <properties>
        <cmake>cmake</cmake>
        <boost.version>1.55.0</boost.version>
        <build-type>Release</build-type>
        <destdir></destdir>
        <!-- as per fuse.h -->
        <fuse.version>26</fuse.version>
        <grpc.protobuf-cpp-plugin>${project.parent.basedir}/paciofs-client/third_party/bin/grpc_cpp_plugin</grpc.protobuf-cpp-plugin>
        <protobuf.protoc>${project.parent.basedir}/paciofs-client/third_party/bin/protoc</protobuf.protoc>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <!-- create build and build/grpc folders -->
                    <execution>
                        <id>make-build-folder</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="${project.build.directory}/${build-type}"/>
                                <mkdir dir="${project.build.directory}/generated-sources/grpc"/>
                                <mkdir dir="${project.build.directory}/generated-sources/protobuf"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>format-sources</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${project.basedir}/format-sources.sh</executable>
                            <skip>${format-sources.skip}</skip>
                        </configuration>
                    </execution>

                    <execution>
                        <id>generate-grpc</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${project.basedir}/third_party/bin/protoc.sh</executable>
                            <arguments>
                                <argument>${project.basedir}/../paciofs-server/src/main/proto</argument>
                                <argument>--proto_path=${project.basedir}/../paciofs-server/src/main/proto</argument>
                                <argument>--cpp_out=${project.build.directory}/generated-sources/protobuf</argument>
                                <argument>--grpc_out=${project.build.directory}/generated-sources/grpc</argument>
                                <argument>--plugin=protoc-gen-grpc=${grpc.protobuf-cpp-plugin}</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>cppcheck</id>
                        <phase>test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <!-- protobuf.cfg is here, needed for library option -->
                            <workingDirectory>${project.basedir}/test/cppcheck</workingDirectory>
                            <executable>cppcheck</executable>
                            <arguments>
                                <argument>--enable=style,information,warning</argument>
                                <argument>--force</argument>
                                <argument>-I${project.basedir}/include</argument>
                                <argument>-I${project.build.directory}/generated-sources/grpc</argument>
                                <argument>-I${project.build.directory}/generated-sources/protobuf</argument>
                                <argument>--library=std,protobuf</argument>
                                <argument>--quiet</argument>
                                <argument>--std=c++14</argument>
                                <argument>--suppress=missingIncludeSystem</argument>
                                <argument>--suppress=*:${project.build.directory}/generated-sources/*</argument>
                                <argument>--verbose</argument>
                                <argument>--xml</argument>
                                <argument>${project.basedir}/src</argument>
                            </arguments>
                            <outputFile>${project.build.directory}/cppcheck.xml</outputFile>
                            <skip>${cppcheck.skip}</skip>
                        </configuration>
                    </execution>

                    <execution>
                        <id>generate-makefile</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.build.directory}/${build-type}</workingDirectory>
                            <executable>${cmake}</executable>
                            <arguments>
                                <argument>-DBOOST_MIN_VERSION=${boost.version}</argument>
                                <argument>-DFUSE_VERSION=${fuse.version}</argument>
                                <argument>-DGRPC_VERSION=${grpc.version}</argument>
                                <argument>-DGRPC_CORE_VERSION=${grpc.core.version}</argument>
                                <argument>-DPROTOBUF_VERSION=${protobuf.version}</argument>
                                <argument>-DCMAKE_BUILD_TYPE=${build-type}</argument>
                                <argument>-DCMAKE_MODULE_PATH=${project.basedir}/cmake/modules</argument>
                                <argument>-DCMAKE_PREFIX_PATH=${project.basedir}/third_party</argument>
                                <argument>${project.basedir}</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>compile-client</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.build.directory}/${build-type}</workingDirectory>
                            <executable>make</executable>
                            <arguments>
                                <argument>-j${build.parallelism}</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>install-client</id>
                        <phase>install</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.build.directory}/${build-type}</workingDirectory>
                            <executable>make</executable>
                            <arguments>
                                <argument>DESTDIR=${destdir}</argument>
                                <argument>install</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
