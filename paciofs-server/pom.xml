<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>de.zib.paciofs</groupId>
        <artifactId>paciofs-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>

    <artifactId>paciofs-server</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>paciofs-server</name>

    <packaging>jar</packaging>

    <repositories>
        <!-- specify default repository to be checked first -->
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2/</url>
        </repository>

        <!-- contains our custom built dependencies -->
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <properties>
        <akka.grpc.version>0.7.0</akka.grpc.version>
        <akka.http.version>10.1.9</akka.http.version>
        <akka.management.version>1.0.2</akka.management.version>
        <akka.version>2.5.23</akka.version>
        <commons-cli.version>1.4</commons-cli.version>
        <commons-codec.version>1.12</commons-codec.version>
        <!-- need unreleased version that fixes [EXEC-71] -->
        <!-- https://github.com/apache/commons-exec/commit/42eb77c321f7dc17aaff45e45ac1179256517005 -->
        <commons-exec.version>1.3.1-SNAPSHOT</commons-exec.version>
        <commons-io.version>2.14.0</commons-io.version>
        <commons-text.version>1.10.0</commons-text.version>
        <gson.version>2.8.9</gson.version>
        <jgit.version>7.2.1.202505142326-r</jgit.version>
        <logback-classic.version>1.3.12</logback-classic.version>
        <protobuf.protoc>${project.parent.basedir}/paciofs-client/third_party/bin/protoc</protobuf.protoc>
        <!-- needs to be absolute for our plugin to work -->
        <spotbugs.exclude-filter>${project.build.directory}/spotbugs-exclude.xml</spotbugs.exclude-filter>
    </properties>

    <dependencies>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback-classic.version}</version>
        </dependency>
        <!-- our fork on jitpack.io -->
        <dependency>
            <groupId>com.github.paciofs</groupId>
            <artifactId>commons-exec</artifactId>
            <version>${commons-exec.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>
        <!-- explicit dependency on protobuf -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>${protobuf.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-discovery_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.discovery</groupId>
            <artifactId>akka-discovery-kubernetes-api_${scala.version}</artifactId>
            <version>${akka.management.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.typesafe.akka</groupId>
                    <artifactId>akka-discovery_${scala.version}</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- to generate gRPC classes from proto files -->
        <dependency>
            <groupId>com.lightbend.akka.grpc</groupId>
            <artifactId>akka-grpc-codegen_${scala.version}</artifactId>
            <version>${akka.grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.grpc</groupId>
            <artifactId>akka-grpc-runtime_${scala.version}</artifactId>
            <version>${akka.grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management-cluster-bootstrap_${scala.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <!-- explicitly depend on akka-management-cluster-http to have cluster health routes included in reference.conf -->
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management-cluster-http_${scala.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-sharding_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster-tools_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <!-- explicitly depend on akka-http to have decode.max-size included in reference.conf -->
        <!-- see: https://discuss.lightbend.com/t/no-configuration-setting-found-for-key-decode-max-size/2738 -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-core_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-spray-json_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http2-support_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-slf4j_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>${commons-cli.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons-io.version}</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-core</artifactId>
            <version>${grpc.version}</version>
            <exclusions>
                <!-- we use our own gson -->
                <exclusion>
                    <groupId>com.google.code.gson</groupId>
                    <artifactId>gson</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-netty-shaded</artifactId>
            <version>${grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
            <version>${grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>${commons-text.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <version>${jgit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- must be specified before summarize-tests (see below) -->
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>spotbugs</id>
                        <phase>test</phase>
                        <goals>
                            <goal>spotbugs</goal>
                        </goals>
                        <configuration>
                            <!-- this file is generated by the below protoc plugin -->
                            <excludeFilterFile>${spotbugs.exclude-filter}</excludeFilterFile>
                            <skip>${spotbugs.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <!-- Create plugin for protoc that generates akka gRPC classes -->
                    <!-- We do this explicitly so we can use our own protobuf -->
                    <execution>
                        <id>generate-protoc-grpc-plugin</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="${project.build.directory}/generated-sources/akka-grpc-java"/>
                                <echo file="${project.build.directory}/akka-grpc.sh" message="#!/bin/bash${line.separator}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="${java.home}/bin/java \${line.separator}" />
                                <!-- ${maven.dependency.groupId.artifactId.jar.path} is only available in maven-antrun-plugin -->
                                <!-- TODO fix hard-coded scala version -->
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="  -cp ${maven.dependency.com.lightbend.akka.grpc.akka-grpc-codegen_2.12.jar.path}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="${path.separator}${maven.dependency.org.scala-lang.scala-library.jar.path}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="${path.separator}${maven.dependency.org.scala-lang.modules.scala-xml_2.12.jar.path}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="${path.separator}${maven.dependency.com.typesafe.play.twirl-api_2.12.jar.path}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="${path.separator}${maven.dependency.com.thesamet.scalapb.compilerplugin_2.12.jar.path}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="${path.separator}${maven.dependency.com.google.protobuf.protobuf-java.jar.path} \${line.separator}" />
                                <echo file="${project.build.directory}/akka-grpc.sh" append="true" message="  akka.grpc.gen.Main${line.separator}" />
                                <chmod file="${project.build.directory}/akka-grpc.sh" perm="a+x" />
                            </target>
                        </configuration>
                    </execution>

                    <!-- Create plugin for protoc that adds protoc-generated classes to the spotbugs exclude filter -->
                    <execution>
                        <id>generate-protoc-spotbugsexcl-plugin</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" message="#!/bin/bash${line.separator}" />
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" append="true" message="${java.home}/bin/java \${line.separator}" />
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" append="true" message="  -cp ${project.build.directory}/classes" />
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" append="true" message="${path.separator}${project.build.directory}/test-classes" />
                                <!-- ${maven.dependency.groupId.artifactId.jar.path} is only available in maven-antrun-plugin -->
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" append="true" message="${path.separator}${maven.dependency.com.google.protobuf.protobuf-java.jar.path} \${line.separator}" />
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" append="true" message="  de.zib.paciofs.test.SpotbugsProtocExcluder" />
                                <echo file="${project.build.directory}/spotbugs-exclude.sh" append="true" message=" --spotbugs-exclude-file ${spotbugs.exclude-filter}${line.separator}" />
                                <chmod file="${project.build.directory}/spotbugs-exclude.sh" perm="a+x" />
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- run before checkstyle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-xref</id>
                        <phase>test</phase>
                        <goals>
                            <goal>jxr</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- run after formatting the sources -->
            <!-- must be specified before summarize-tests (see below) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>test</phase>
                        <goals>
                            <goal>checkstyle</goal>
                        </goals>
                        <configuration>
                            <configLocation>${project.basedir}/src/main/resources/checkstyle.xml</configLocation>
                            <encoding>UTF-8</encoding>
                            <linkXRef>true</linkXRef>
                            <sourceDirectories>
                                <!-- so the generated code does not get checked -->
                                <directory>${project.build.sourceDirectory}</directory>
                            </sourceDirectories>
                            <skip>${checkstyle.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>allinone</shadedClassifierName>
                            <artifactSet>
                                <includes>
                                    <include>*:*</include>
                                </includes>
                                <excludes>
                                    <exclude>com.lightbend.akka.grpc:akka-grpc-codegen_${scala.version}</exclude>
                                </excludes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${project.groupId}:${project.artifactId}</artifact>
                                    <excludes>
                                        <exclude>**/checkstyle.xml</exclude>
                                        <exclude>**/logback-test.xml</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>reference.conf</resource>
                                </transformer>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>de.zib.paciofs.PacioFs</Main-Class>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- add generated gRPC classes to build -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-grpc-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/akka-grpc-java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>format-sources</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${project.basedir}/format-sources.sh</executable>
                            <skip>${format-sources.skip}</skip>
                        </configuration>
                    </execution>

                    <!-- add the protoc-generated classes to the spotbugs exclude filter -->
                    <execution>
                        <id>generate-grpc-excluder</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${project.basedir}/../paciofs-client/third_party/bin/protoc.sh</executable>
                            <arguments>
                                <argument>${project.basedir}/src/main/proto</argument>
                                <argument>--proto_path=${project.basedir}/src/main/proto</argument>
                                <argument>--spotbugsexcl_out=${project.build.directory}</argument>
                                <argument>--plugin=protoc-gen-spotbugsexcl=${project.build.directory}/spotbugs-exclude.sh</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- generate akka gRPC classes -->
                    <execution>
                        <id>generate-grpc-classes</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${project.basedir}/../paciofs-client/third_party/bin/protoc.sh</executable>
                            <arguments>
                                <argument>${project.basedir}/src/main/proto</argument>
                                <argument>--proto_path=${project.basedir}/src/main/proto</argument>
                                <argument>--java_out=${project.build.directory}/generated-sources/akka-grpc-java</argument>
                                <argument>--grpc_out=${project.build.directory}/generated-sources/akka-grpc-java</argument>
                                <argument>--plugin=protoc-gen-grpc=${project.build.directory}/akka-grpc.sh</argument>
                                <argument>--grpc_opt=language=java</argument>
                                <argument>--grpc_opt=generate_client=false</argument>
                                <argument>--grpc_opt=generate_server=true</argument>
                                <argument>--grpc_opt=server_power_apis=true</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- invoke like this: mvn exec:java@run-server -->
                    <execution>
                        <id>run-server</id>
                        <phase>none</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>de.zib.paciofs.PacioFs</mainClass>
                            <systemProperties>
                                <!-- assume MultiChain has been built next to us -->
                                <systemProperty>
                                    <key>multichain.home</key>
                                    <value>${project.basedir}/../../multichain</value>
                                </systemProperty>
                            </systemProperties>
                            <arguments>
                                <argument>--config</argument>
                                <argument>${project.basedir}/src/test/resources/local.conf</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- must be specified after checkstyle and spotbugs (see above) -->
                    <execution>
                        <id>summarize-checks</id>
                        <phase>test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>de.zib.paciofs.test.CheckSummarizer</mainClass>
                            <classpathScope>test</classpathScope>
                            <arguments>
                                <argument>--dir</argument>
                                <argument>${project.build.directory}</argument>
                                <argument>--skip-checkstyle</argument>
                                <argument>${checkstyle.skip}</argument>
                                <argument>--skip-spotbugs</argument>
                                <argument>${spotbugs.skip}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
